// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  userInfo      UserInfo?
  business      Business?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserInfo {
  id          String  @id @default(cuid())
  userId      String  @unique
  phoneNumber Int?    @unique
  address     String?
  gender      Gender?
  birthday    String?
  cartItems   Order[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Business {
  id           String  @id @default(cuid())
  ownerId      String  @unique

  businessName String  @unique
  description  String?
  category     String?
  contactNumber String @unique
  email        String? 
  logoUrl      String
  CoverPhotoUrl String?
 
  Orders       Order[]

  Items        Item[]
  owner        User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Item {
  item_id     String  @id @default(cuid())
  Photo       String
  name        String
  category    String?
  description String?
  price       Int
  quantity    Int

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  OrderItems OrderItem[]

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  order_id  String @id @default(cuid())
  adress    String
  totalPrice    Int
  totalQuantity Int
  
  OrderItems   OrderItem[]

  userInfoId String
  userInfo   UserInfo? @relation(fields: [userInfoId], references: [id], onDelete: Cascade)

  BusinessId  String
  business   Business @relation(fields: [BusinessId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  orderItem_id String @id @default(cuid())
  quantity  Int
  price     Int

  order_id  String
  order     Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade)

  item_id   String
  item      Item    @relation(fields: [item_id], references: [item_id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// make a cart item reference: https://chatgpt.com/c/e131f8df-a51d-465f-82b6-bd07c0520d53